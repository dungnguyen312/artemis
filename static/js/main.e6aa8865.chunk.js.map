{"version":3,"sources":["static/artemis-goodness.jpg","App.js","reportWebVitals.js","index.js"],"names":["React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","scaleNames","c","f","toCelsius","fahrenheit","toFahrenheit","celsius","tryConvert","temperature","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","BoilingVerdict","props","TemperatureInput","handleChange","bind","state","e","this","onTemperatureChange","target","value","scale","onChange","Calculator","handleCelsiusChange","handleFahrenheitChange","setState","ReactDOM","render","document","getElementById"],"mappings":"oOAAe,I,YCqEKA,IAAMC,UA8CXC,ICvGAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDRQ,EAAa,CACjBC,EAAG,UACHC,EAAG,cAEL,SAASC,EAAUC,GACjB,OAA4B,GAAnBA,EAAa,IAAW,EAGnC,SAASC,EAAaC,GACpB,OAAkB,EAAVA,EAAe,EAAI,GAG7B,SAASC,EAAWC,EAAaC,GAC/B,IAAMC,EAAQC,WAAWH,GACzB,GAAII,OAAOC,MAAMH,GACf,MAAO,GAET,IAAMI,EAASL,EAAQC,GAEvB,OADgBK,KAAKC,MAAe,IAATF,GAAiB,KAC7BG,WAGjB,SAASC,EAAeC,GACtB,OAAIA,EAAMb,SAAW,IACZ,sDAEF,0D,IAGHc,E,kDACJ,WAAYD,GAAQ,IAAD,8BACjB,cAAMA,IACDE,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,MAAQ,CAAEf,YAAa,IAHX,E,gDAMnB,SAAagB,GACXC,KAAKN,MAAMO,oBAAoBF,EAAEG,OAAOC,S,oBAG1C,WACE,IAAMpB,EAAciB,KAAKN,MAAMX,YACzBqB,EAAQJ,KAAKN,MAAMU,MAEzB,OACE,qCACE,2DAA8B7B,EAAW6B,GAAzC,OACA,uBAAOD,MAAOpB,EAAasB,SAAUL,KAAKJ,sB,GAlBnBjC,IAAMC,WAwB/B0C,E,kDACJ,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDa,oBAAsB,EAAKA,oBAAoBV,KAAzB,gBAC3B,EAAKW,uBAAyB,EAAKA,uBAAuBX,KAA5B,gBAC9B,EAAKC,MAAQ,CAAEf,YAAa,GAAIqB,MAAO,KAJtB,E,uDAMnB,SAAoBrB,GAClBiB,KAAKS,SAAS,CAAEL,MAAO,IAAKrB,kB,oCAE9B,SAAuBA,GACrBiB,KAAKS,SAAS,CAAEL,MAAO,IAAKrB,kB,oBAE9B,WACE,IAAMqB,EAAQJ,KAAKF,MAAMM,MACnBrB,EAAciB,KAAKF,MAAMf,YACzBF,EACM,MAAVuB,EAAgBtB,EAAWC,EAAaL,GAAaK,EACjDJ,EACM,MAAVyB,EAAgBtB,EAAWC,EAAaH,GAAgBG,EAC1D,OACE,gCACE,cAAC,EAAD,CACEqB,MAAM,IACNrB,YAAaF,EACboB,oBAAqBD,KAAKO,sBAE5B,cAAC,EAAD,CACEH,MAAM,IACNrB,YAAaJ,EACbsB,oBAAqBD,KAAKQ,yBAE5B,cAACf,EAAD,CAAgBZ,QAASK,WAAWL,Y,GAhCnBlB,IAAMC,WAsC/B8C,IAASC,OACP,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAa1B/C,M","file":"static/js/main.e6aa8865.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/artemis-goodness.6a1f222b.jpg\";","import artemis from \"./static/artemis-goodness.jpg\";\nimport \"./App.css\";\nimport React from \"react\";\n\nfunction PersonList(props) {\n  var people = props.value;\n  const listItems = props.value.map((p) => <li key={p.id}>{p.name}</li>);\n  const formatName = (name) => name.join(\" & \");\n  return (\n    <div>\n      <ul>{listItems}</ul>\n      {people.length > 0 && <h2>You have {people.length} unread messages.</h2>}\n      <b>{formatName(name)}</b>\n      <p> {new Date().toLocaleTimeString()}</p>\n    </div>\n  );\n}\n\nconst data = [\n  {\n    id: 0,\n    name: \"dung\",\n    age: 26,\n    language: [\"Vi\", \"Jp\"],\n  },\n  {\n    id: 1,\n    name: \"ann\",\n    age: 18,\n    language: [\"Vi\", \"En\"],\n  },\n];\nconst comment = {\n  date: 1635332108,\n  text: \"I hope you enjoy learning React!\",\n  author: {\n    name: \"Dzung\",\n    avatarUrl: \"https://cdn.myanimelist.net/images/characters/16/74945.jpg\",\n  },\n};\nconst name = [\"Dung\", \"Nguyen\", \"Ann\"];\nfunction Avatar(props) {\n  return (\n    <img className=\"Avatar\" src={props.user.avatarUrl} alt={props.user.name} />\n  );\n}\n\nfunction UserInfo(props) {\n  return (\n    <div className=\"UserInfo\">\n      <Avatar user={props.user} />\n      <div className=\"UserInfo-name\">{props.user.name}</div>\n    </div>\n  );\n}\n\nconst formatDate = (timestamp) =>\n  new Date(timestamp).toLocaleTimeString(\"en-US\");\n\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <UserInfo user={props.author} />\n      <div className=\"Comment-text\">{props.text}</div>\n      <div className=\"Comment-date\">{formatDate(props.date)}</div>\n    </div>\n  );\n}\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n  }\n  tick() {\n    this.setState({\n      date: new Date(),\n    });\n  }\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Comment\n          date={comment.date}\n          text={comment.text}\n          author={comment.author}\n        />\n        <Clock />\n        <img src={artemis} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Welcome you to <code>Artemis</code>.\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst scaleNames = {\n  c: \"Celsius\",\n  f: \"Fahrenheit\",\n};\nfunction toCelsius(fahrenheit) {\n  return ((fahrenheit - 32) * 5) / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return (celsius * 9) / 5 + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return \"\";\n  }\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n\nfunction BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return <p>The water would boil.</p>;\n  }\n  return <p>The water would not boil.</p>;\n}\n\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = { temperature: \"\" };\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input value={temperature} onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = { temperature: \"\", scale: \"c\" };\n  }\n  handleCelsiusChange(temperature) {\n    this.setState({ scale: \"c\", temperature });\n  }\n  handleFahrenheitChange(temperature) {\n    this.setState({ scale: \"f\", temperature });\n  }\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius =\n      scale === \"f\" ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit =\n      scale === \"c\" ? tryConvert(temperature, toFahrenheit) : temperature;\n    return (\n      <div>\n        <TemperatureInput\n          scale=\"c\"\n          temperature={celsius}\n          onTemperatureChange={this.handleCelsiusChange}\n        />\n        <TemperatureInput\n          scale=\"f\"\n          temperature={fahrenheit}\n          onTemperatureChange={this.handleFahrenheitChange}\n        />\n        <BoilingVerdict celsius={parseFloat(celsius)} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <div>\n    <Calculator />\n    <Calculator />\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// );\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}